# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.crypto.secret="8v;v3h5dWC]F=h3Mn4^o398Qope_Zx>h_h=;azYnHWnE[bnjKchJdw8GXNvkTQJT"

# The application languages
# ~~~~~
play.i18n.langs = [ "en" ]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# play.http.router = my.application.Routes
#cache
play.modules.enabled+="com.github.mumoshu.play2.memcached.MemcachedModule"
play.modules.disabled+="play.api.cache.EhCacheModule"
# Well-known configuration provided by Play
play.modules.cache.defaultCache=default
play.modules.cache.bindCaches=["db-cache", "user-cache", "session-cache"]
memcached.host="172.28.3.13:11211" #memcached host配置

# use mybatis-config.xml
play.modules.enabled += "modules.StyleDBModule"
play.modules.enabled += "modules.ShoppingDBModule"
play.modules.enabled += "modules.IdDBModule"
play.modules.enabled += "modules.ActorModule"
play.modules.enabled += "modules.PromotionDBModule"

play.http.filters = "filters.Filters"
application.global="filters.Global"


image.server.url = "http://hmm-images.oss-cn-beijing.aliyuncs.com/"
//deploy.server.url = "http://172.28.3.51:9001"
//shopping.server.url = "http://172.28.3.51:9003"
//id.server.url = "http://172.28.3.51:9004"
//imgprocess.server.url = "http://172.28.3.51:3008"
deploy.server.url = "http://172.28.3.78:9001"
shopping.server.url = "http://172.28.3.78:9003"
id.server.url = "http://172.28.3.78:9004"
imgprocess.server.url = "http://172.28.3.51:3008"

akka.actor.default-dispatcher.fork-join-executor.pool-size-max = 64
akka.actor.debug.receive = on

order.countdown.milliseconds = 86400000

pin.activity.milliseconds = 86400000

oss.url="http://img.hanmimei.com"

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# play.http.router = my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
db.style.driver="org.postgresql.Driver"
db.style.url="jdbc:postgresql://172.28.3.17:5432/style"
db.style.username="postgres"
db.style.password="postgres"

db.shopping.driver="org.postgresql.Driver"
db.shopping.url="jdbc:postgresql://172.28.3.17:5432/shopping"
db.shopping.username="postgres"
db.shopping.password="postgres"

db.id.driver="org.postgresql.Driver"
db.id.url="jdbc:postgresql://172.28.3.17:5432/account"
db.id.username="postgres"
db.id.password="postgres"

#拼购
db.promotion.driver="org.postgresql.Driver"
db.promotion.url="jdbc:postgresql://172.28.3.17:5432/promotion"
db.promotion.username=postgres
db.promotion.password="postgres"

application.global="filters.Global"
# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.username=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# play.evolutions.enabled=false

# You can disable evolutions for a specific datasource if necessary
# play.evolutions.db.default.enabled=false
//play.akka.actor-system = "shopping"
//shopping { # the name your actor system is going to use
//  akka {
//    # other thing is just the same as that in API
//    loglevel = "INFO"
//    #loggers = ["akka.event.slf4j.Slf4jLogger"]
//
//    actor {
//      provider = "akka.remote.RemoteActorRefProvider"
//    }
//    remote {
//      enabled-transports = ["akka.remote.netty.tcp"]
//      netty.tcp {
//        hostname = "127.0.0.1"
//        port = 2555
//        #hostname = my.domain.com # external (logical) hostname
//        #port = 8000 # external (logical) port
//        #bind-hostname = local.address # internal (bind) hostname
//        #bind-port = 2552 # internal (bind) port
//      }
//    }
//    deployment {
//      "/creationActor/*" {
//        remote = "akka.tcp://CalculatorWorkerSystem@127.0.0.1:2552"
//      }
//    }
//  }
//}


akka {
  # Akka version, checked against the runtime version of Akka.
  version = "2.4.1"

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.Logging$DefaultLogger"]

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream. It can perform
  # fine grained filtering based on the log source. The default
  # implementation filters on the `loglevel`.
  # FQCN of the LoggingFilter. The Class of the FQCN must implement
  # akka.event.LoggingFilter and have a public constructor with
  # (akka.actor.ActorSystem.Settings, akka.event.EventStream) parameters.
  logging-filter = "akka.event.DefaultLoggingFilter"

  log-dead-letters-during-shutdown = off

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "WARNING"

  io {
    tcp {
      max-received-message-size = unlimited
    }
  }

  netty {
    hostname = "127.0.0.1"
    port = 2551
    send-buffer-size = 8192000b
    receive-buffer-size = 8192000b
    maximum-frame-size = 4096000b
  }

}


include "pay.conf"